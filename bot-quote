#!/usr/bin/env python3

import requests
import random
import sqlite3
import schedule
import time
import logging
from datetime import datetime
import argparse
from itertools import cycle

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class NextcloudTalkBot:
    def __init__(self, nextcloud_url, username, password, room_token):
        self.base_url = nextcloud_url.rstrip('/')
        self.username = username
        self.password = password
        self.room_token = room_token
        self.auth = (username, password)
        self.quotes_db = 'quotes.db'
        self.init_database()
        self.category_cycle = cycle(['motivational', 'programming', 'funny', 'general'])

    def init_database(self):
        """Initialize SQLite database for storing quotes"""
        with sqlite3.connect(self.quotes_db) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS quotes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    quote TEXT NOT NULL,
                    author TEXT,
                    category TEXT DEFAULT 'general',
                    submitted_by TEXT,
                    date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('SELECT COUNT(*) FROM quotes')
            if cursor.fetchone()[0] == 0:
                default_quotes = [
                    ("Success is not final, failure is not fatal: It is the courage to continue that counts.", "Winston Churchill", "motivational"),
                    ("Programs must be written for people to read, and only incidentally for machines to execute.", "Harold Abelson", "programming"),
                    ("Do not take life too seriously. You will never get out of it alive.", "Elbert Hubbard", "funny"),
                    ("Opportunities don't happen, you create them.", "Chris Grosser", "motivational"),
                    ("First, solve the problem. Then, write the code.", "John Johnson", "programming"),
                    ("People say nothing is impossible, but I do nothing every day.", "A. A. Milne", "funny"),
                    ("Your time is limited, so donâ€™t waste it living someone elseâ€™s life.", "Steve Jobs", "motivational"),
                    ("Experience is the name everyone gives to their mistakes.", "Oscar Wilde", "funny"),
                    ("Simplicity is the soul of efficiency.", "Austin Freeman", "programming"),
                    ("Donâ€™t watch the clock; do what it does. Keep going.", "Sam Levenson", "motivational")
                ]
                
                cursor.executemany(
                    'INSERT INTO quotes (quote, author, category) VALUES (?, ?, ?)',
                    default_quotes
                )
                logger.info("Default quotes added to database")
        logger.info("Database initialized successfully")

    def send_message(self, message):
        """Send message to Nextcloud Talk room"""
        url = f"{self.base_url}/ocs/v2.php/apps/spreed/api/v1/chat/{self.room_token}"
        headers = {'OCS-APIRequest': 'true', 'Content-Type': 'application/json'}
        data = {'message': message, 'actorDisplayName': 'Quote Bot'}
        
        try:
            response = requests.post(url, json=data, headers=headers, auth=self.auth)
            response.raise_for_status()
            logger.info(f"Message sent successfully")
            return True
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to send message: {e}")
            return False

    def get_random_quote(self, category=None):
        """Get a random quote from database"""
        with sqlite3.connect(self.quotes_db) as conn:
            cursor = conn.cursor()
            if category:
                cursor.execute('SELECT quote, author, category FROM quotes WHERE category = ? ORDER BY RANDOM() LIMIT 1', (category,))
            else:
                cursor.execute('SELECT quote, author, category FROM quotes ORDER BY RANDOM() LIMIT 1')
            result = cursor.fetchone()

        if result:
            quote, author, cat = result
            return f'ðŸ’« "{quote}"\nâ€” {author} _(Category: {cat.title()})_'
        else:
            return "No quotes found in the database."

    def add_quote(self, quote, author, category='general', submitted_by=None):
        """Add a new quote to database"""
        with sqlite3.connect(self.quotes_db) as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO quotes (quote, author, category, submitted_by) VALUES (?, ?, ?, ?)',
                          (quote, author, category, submitted_by))
        logger.info(f"Added new quote by {author}")
        return f"âœ… Quote added successfully!\n\"{quote}\" - {author}"

    def send_daily_quote(self):
        """Send the daily quote"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M")
        category = next(self.category_cycle)  # cycle through categories
        quote = self.get_random_quote(category)
        message = f"ðŸŒ… **Quote of the Day** - {current_time}\n\n{quote}\n\n_Have a great day, team!_ ðŸš€"
        logger.info(f"Sending daily quote ({category})")
        self.send_message(message)

    def get_stats(self):
        """Get quote statistics"""
        with sqlite3.connect(self.quotes_db) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM quotes')
            total = cursor.fetchone()[0]
            cursor.execute('SELECT category, COUNT(*) FROM quotes GROUP BY category')
            by_category = cursor.fetchall()

        stats = f"ðŸ“Š **Quote Bot Statistics**\n\nTotal quotes: {total}\n\nBy category:\n"
        for category, count in by_category:
            stats += f"â€¢ {category.title()}: {count}\n"
        return stats

def main():
    parser = argparse.ArgumentParser(description='Nextcloud Talk Quote Bot')
    parser.add_argument('--url', required=True, help='Nextcloud URL (e.g., http://localhost/nextcloud)')
    parser.add_argument('--username', required=True, help='Nextcloud username')
    parser.add_argument('--password', required=True, help='Nextcloud password')
    parser.add_argument('--room-token', required=True, help='Talk room token')
    parser.add_argument('--send-now', action='store_true', help='Send quote immediately')
    parser.add_argument('--add-quote', nargs=3, metavar=('QUOTE', 'AUTHOR', 'CATEGORY'), help='Add a new quote')
    parser.add_argument('--stats', action='store_true', help='Show statistics')
    parser.add_argument('--daemon', action='store_true', help='Run as daemon with scheduled quotes')
    parser.add_argument('--time', default="09:00", help='Schedule time for daily quotes (HH:MM)')
    args = parser.parse_args()
    
    bot = NextcloudTalkBot(args.url, args.username, args.password, args.room_token)
    
    if args.send_now:
        bot.send_daily_quote()
    elif args.add_quote:
        quote, author, category = args.add_quote
        result = bot.add_quote(quote, author, category)
        print(result)
    elif args.stats:
        stats = bot.get_stats()
        print(stats)
        bot.send_message(stats)
    elif args.daemon:
        schedule.every().day.at(args.time).do(bot.send_daily_quote)
        print(f"Quote bot started! Scheduled to send daily quotes at {args.time}")
        print("Press Ctrl+C to stop")
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)
        except KeyboardInterrupt:
            print("\nBot stopped.")
    else:
        print("Use --help to see available options")

if __name__ == "__main__":
    main()
